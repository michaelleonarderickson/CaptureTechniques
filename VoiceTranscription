  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Voice to Text Transcription</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #171717; /* Dark background for night mode */
            color: #F1FAEE; /* Light text color for readability */
        }
        #recordingStatus {
            color: #E63946; /* Bright color for recording status */
        }
        #realTimeText {
            background-color: #000000; /* Black real-time text background */
            color: #cccccc; /* Black real-time text color */
            padding: 10px;
            margin-bottom: 10px;
            position: relative; /* Position relative for absolute positioning of recording status */
        }
        #recordingStatusText {
            color: #E63946; /* Red recording status text color */
            position: absolute;
            top: 5px;
            left: 10px;
            display: none; /* Initially hidden */
        }
        #transcriptionContainer {
            margin-top: 20px;
        }
        .btn-start {
            background-color: #457B9D; /* Start button color */
            border-color: #457B9D;
        }
        .btn-stop {
            background-color: #E63946; /* Stop button color */
            border-color: #E63946;
            color: #000000;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-9">
                <h3>Transcribe your speech</h3>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-9">
                <div id="realTimeText" class="mb-3"></div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-3 d-flex flex-row">
                <button id="recordButton" class="btn btn-start">Record</button>
                <p id="recordingStatus" style="color: red; display: none;"> Recording in progress...</p>
            </div>
            <div class="col-md-2 d-flex flex-row-reverse"></div>
                <button id="copyTranscriptionButton" class="btn btn-primary d-flex flex-row-reverse">Copy Transcription</button>
            <div class="custom-control custom-switch d-flex flex-row-reverse col-md-2">
                <input type="checkbox" class="custom-control-input" id="copyTimestampsCheckbox">
                <label class="custom-control-label" for="copyTimestampsCheckbox">Copy Timestamps</label>
            </div>                
        </div>
        <div class="row justify-content-center">

        </div>
        <div class="row justify-content-center">
            <div class="col-md-9" id="transcriptionContainer"></div>
        </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        window.onload = function() {
            const recordButton = document.getElementById('recordButton');
            const recordingStatus = document.getElementById('recordingStatus');
            const realTimeText = document.getElementById('realTimeText');
            const recordingStatusText = document.getElementById('recordingStatusText');
            const transcriptionContainer = document.getElementById('transcriptionContainer');
            const copyTranscriptionButton = document.getElementById('copyTranscriptionButton');
            const copyTimestampsCheckbox = document.getElementById('copyTimestampsCheckbox');
            
            let timeoutId; // For managing the 64-second visibility of interim text
        
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            if (SpeechRecognition) {
                const recognition = new SpeechRecognition();
                recognition.continuous = true;
                recognition.interimResults = true;
        
                recognition.onstart = function() {
                    recordButton.textContent = 'Stop';
                    recordingStatus.style.display = 'block';
                    recordingStatusText.style.display = 'block'; // Display recording status text
                    realTimeText.style.display = 'block'; // Make sure the real-time text container is visible
                };
        
                recognition.onerror = function(event) {
                    alert('Speech recognition error: ' + event.error);
                };
        
                recognition.onend = function() {
                    recordButton.textContent = 'Record';
                    recordingStatus.style.display = 'none';
                    recordingStatusText.style.display = 'none'; // Hide recording status text
                };
        
                recognition.onresult = function(event) {
                    let interim_transcript = '';
        
                    for (let i = event.resultIndex; i < event.results.length; ++i) {
                        if (event.results[i].isFinal) {
                            clearTimeout(timeoutId); // Clear the existing timeout
                            const timestamp = new Date();
                            const formattedTimestamp = `[${timestamp.getFullYear()}:${("0" + (timestamp.getMonth() + 1)).slice(-2)}:${("0" + timestamp.getDate()).slice(-2)} | ${("0" + timestamp.getHours()).slice(-2)}:${("0" + timestamp.getMinutes()).slice(-2)}:${("0" + timestamp.getSeconds()).slice(-2)}.${timestamp.getMilliseconds()}]`;
                            const final_transcript = `${formattedTimestamp} ${event.results[i][0].transcript}`;
                            const transcriptionDiv = document.createElement('div');
                            transcriptionDiv.textContent = final_transcript;
                            transcriptionContainer.appendChild(transcriptionDiv); // Append final transcript at the end
                            realTimeText.textContent = ''; // Clear interim text after finalizing
                        } else {
                            interim_transcript += event.results[i][0].transcript;
                        }
                    }
        
                    // Update the real-time text with the latest interim results
                    if (interim_transcript !== '') {
                        realTimeText.textContent = interim_transcript;
                        clearTimeout(timeoutId); // Reset the timer whenever new interim results are received
                        timeoutId = setTimeout(() => {
                            realTimeText.textContent = ''; // Clear the real-time text after 64 seconds
                            realTimeText.style.display = 'none'; // Optionally hide the container
                        }, 64000); // Set the timer for 64 seconds
                    }
                };
        
                recordButton.onclick = function() {
                    if (recordButton.textContent === 'Record') {
                        recognition.start();
                        recordButton.textContent = 'Stop';
                        recordButton.classList.remove('btn-start');
                        recordButton.classList.add('btn-stop');
                    } else {
                        recognition.stop();
                        clearTimeout(timeoutId); // Ensure the timeout is cleared when stopping manually
                        recordButton.textContent = 'Record';
                        recordButton.classList.remove('btn-stop');
                        recordButton.classList.add('btn-start');
                    }
                };
        
                copyTranscriptionButton.onclick = function() {
                    const textToCopy = transcriptionContainer.innerText;
                    if (copyTimestampsCheckbox.checked) {
                        navigator.clipboard.writeText(textToCopy);
                    } else {
                        const textWithoutTimestamps = textToCopy.replace(/\[\d{4}:\d{2}:\d{2} \| \d{2}:\d{2}:\d{2}\.\d{3}\]/g, ''); // Remove timestamps
                        navigator.clipboard.writeText(textWithoutTimestamps);
                    }
                };
        
            } else {
                recordButton.disabled = true;
                realTimeText.textContent = "Speech recognition is not supported in this browser. Try Chrome or Edge.";
            }
        };
        </script>
</body>
</html>
